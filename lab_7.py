# -*- coding: utf-8 -*-
"""Lab 7

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n0zGavg3u1Re61cevniiDsiS65GMrSAt
"""

# Commented out IPython magic to ensure Python compatibility.
from datascience import *
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import math
from scipy import stats
import numpy as np
import pandas as pd
import warnings
import plotly.graph_objects as go
warnings.simplefilter(action='ignore', category=np.VisibleDeprecationWarning)

"""First, let's load in our data."""

flights = pd.read_csv('flights.csv')
airports = pd.read_csv('airports.csv')
airlines = pd.read_csv('airlines.csv')

airlines.head()

"""Now, let's choose which variables would be interesting to analyze in a map display from the flights dataset by exploring the data a bit."""

flights.head()

airlines.head()

airports.head()

"""I think it would be interesting to make a map that draws lines for each flight in the United States. With this map, you could see which airports offer the most flights, which airports are limited, and can see just how interconnected the United States is through its airports. The datascience package doesn't support drawing lines on maps however, so I will be using the plotly.graph_objects and pandas libraries along with the plotly documentation for map lines: https://plotly.com/python/lines-on-maps/ to help me do what I would like to do.

First, for simplicity, let's remove all of the uneccessary columns in the flights and airports dataframes.
"""

flights2 = flights.filter(['ORIGIN_AIRPORT', 'DESTINATION_AIRPORT'], axis=1)
airports2 = airports.filter(['IATA_CODE', 'LATITUDE', 'LONGITUDE'], axis=1)

airports2.head()

flights2.head()

"""Next, let's merge flights and airports to get the latitude and longitude of the origin airport."""

flights2 = pd.merge(flights2, airports2, left_on='ORIGIN_AIRPORT', right_on='IATA_CODE', how='left')
flights2.head()

"""Before we do the same with the destination airport, let's rename the latitude and longitude columns so we can distinguish which lats and longs are for which airport. Also, we can drop the unnecessary Iata Code column."""

flights2.rename(columns = {'LATITUDE': 'O_LAT', 'LONGITUDE': 'O_LONG'}, inplace = True)
flights2 = flights2.drop('IATA_CODE', axis=1)
flights2.head()

"""Now, let's do the same for the destination airports."""

flights2 = pd.merge(flights2, airports2, left_on='DESTINATION_AIRPORT', right_on='IATA_CODE', how='left')
flights2.rename(columns = {'LATITUDE': 'D_LAT', 'LONGITUDE': 'D_LONG'}, inplace = True)
flights2 = flights2.drop('IATA_CODE', axis=1)
flights2.head()

"""Next, let's use the grouby feature to add a count column and remove duplicate rows."""

flights3 = flights2.groupby(['ORIGIN_AIRPORT', 'DESTINATION_AIRPORT', 'O_LAT', 'O_LONG', 'D_LAT', 'D_LONG']).size().reset_index(name='COUNT')
flights3.head()

"""Now, let's start to work on the map. First we can add little markers at each airport using the airport data frame. This code is found from: https://plotly.com/python/lines-on-maps/ and adapted for our dataset by me."""

fig = go.Figure()

fig.add_trace(go.Scattergeo(
    locationmode = 'USA-states',
    lon = airports['LONGITUDE'],
    lat = airports['LATITUDE'],
    hoverinfo = 'text',
    text = airports['AIRPORT'],
    mode = 'markers',
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)',
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))

fig.show()

"""Now, let's draw the lines.  Lines will be thicker if they are more common. Code adapted from: https://plotly.com/python/lines-on-maps/"""

flight_paths = []
for i in range(len(flights3)):
    fig.add_trace(
        go.Scattergeo(
            locationmode = 'USA-states',
            lon = [flights3['O_LONG'][i], flights3['D_LONG'][i]],
            lat = [flights3['O_LAT'][i], flights3['D_LAT'][i]],
            mode = 'lines',
            line = dict(width = 1,color = 'red'),
            opacity = float(flights3['COUNT'][i]) / float(flights3['COUNT'].max()),
        ))
fig.show()

"""Lastly, let's put some finishing touches on the map by adding a title and centralizing the image."""

fig.update_layout(
    title_text = '2015 U.S.A Flights<br>(Hover for more info)',
    showlegend = False,
    geo = dict(
        scope = 'north america',
        projection_type = 'azimuthal equal area',
        showland = True,
        landcolor = 'rgb(243, 243, 243)',
        countrycolor = 'rgb(204, 204, 204)',
    ),
)

fig.show()

"""As you can see, this map is very busy which makes it difficult to get much insight without zooming in. You can get some incredible insights by zooming in, but because we have to turn in a PDF its hard for me to capture this detail. To make it easier to look at, let's redo the same thing but eliminate the bottom 50% of flights based on their frequency to get rid of a lot of uncommon flights. We can find out this data by using the .describe() method in pandas."""

flights3.describe()

"""As the above data shows, any flight that happened 668 times or less (less than twice a day) can be removed. After we remove that data with the first few lines of code. We will repeat the steps we did with the old dataframe to get the final visualization."""

flights3 = flights3[flights3['COUNT'] > 668]
flights3

"""If we do not reset the underlying indices in the dataframe, we will get KeyErrors when we try to make our new map. So, we can use the numpy arange method to reset the index values."""

flights3.index = np.arange(1, len(flights3) + 1)
flights3

fig = go.Figure()

fig.add_trace(go.Scattergeo(
    locationmode = 'USA-states',
    lon = airports['LONGITUDE'],
    lat = airports['LATITUDE'],
    hoverinfo = 'text',
    text = airports['AIRPORT'],
    mode = 'markers',
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)',
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))



flight_paths = []
for i in range(len(flights3)):
    try:
        fig.add_trace(
            go.Scattergeo(
                locationmode = 'USA-states',
                lon = [flights3['O_LONG'][i], flights3['D_LONG'][i]],
                lat = [flights3['O_LAT'][i], flights3['D_LAT'][i]],
                mode = 'lines',
                line = dict(width = 1,color = 'red'),
                opacity = float(flights3['COUNT'][i]) / float(flights3['COUNT'].max()),
            ))
    except KeyError: #I kept continually getting 1 key error no matter how I arranged the indices, so I decided to just omit the one row that would not work
        pass



fig.update_layout(
    title_text = '2015 U.S.A Flights<br>(Hover for more info)',
    showlegend = False,
    geo = dict(
        scope = 'north america',
        projection_type = 'azimuthal equal area',
        showland = True,
        landcolor = 'rgb(243, 243, 243)',
        countrycolor = 'rgb(204, 204, 204)',
    ),
)

fig.show()

"""Still, the map is relatively busy. However, there are still several takeaways to be made. First of all, it is astounding to see the number of airports in the United States and the seemingly infinite number of combinations of ways to travel between them. As someone who often complains about flight delays and interuptions, this makes it a bit more understandable. The web of connecting flights is so complex. Ultimatley, it is clear that the most commonly used airports are Atlanta, Dallas, Denver, Chicago, Los Angeles, New York, the airports in Florida like Orlando and Miami, and even Seattle gets a lot of traffic. It is also interesting to see the general lack of airports and flights that travel to Northern area of the United States by Montana, Idaho, Wyoming, and the Dakotas. Overall, the flights are pretty well distributed and there are a lot of flights that happen at least twice a day. While this is my official analysis paragraph, I think it will be interesting to look at only the flights that are in the top 5% of frequency. So that is what is below this textbox."""

flights3["COUNT"].quantile(.95)

flights3 = flights3[flights3['COUNT'] > 5104]
flights3.index = np.arange(1, len(flights3) + 1)
fig = go.Figure()

fig.add_trace(go.Scattergeo(
    locationmode = 'USA-states',
    lon = airports['LONGITUDE'],
    lat = airports['LATITUDE'],
    hoverinfo = 'text',
    text = airports['AIRPORT'],
    mode = 'markers',
    marker = dict(
        size = 2,
        color = 'rgb(255, 0, 0)',
        line = dict(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    )))



flight_paths = []
for i in range(len(flights3)):
    try:
        fig.add_trace(
            go.Scattergeo(
                locationmode = 'USA-states',
                lon = [flights3['O_LONG'][i], flights3['D_LONG'][i]],
                lat = [flights3['O_LAT'][i], flights3['D_LAT'][i]],
                mode = 'lines',
                line = dict(width = 1,color = 'red'),
                opacity = float(flights3['COUNT'][i]) / float(flights3['COUNT'].max()),
            ))
    except KeyError: #I kept continually getting 1 key error no matter how I arranged the indices, so I decided to just omit the one row that would not work
        pass



fig.update_layout(
    title_text = '2015 U.S.A Flights<br>(Hover for more info)',
    showlegend = False,
    geo = dict(
        scope = 'north america',
        projection_type = 'azimuthal equal area',
        showland = True,
        landcolor = 'rgb(243, 243, 243)',
        countrycolor = 'rgb(204, 204, 204)',
    ),
)

fig.show()